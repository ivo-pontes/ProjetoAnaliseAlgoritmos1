void quickSort(long int *array, long int begin,long int length) 
{
  long int i, j, aux;

  for (i = 1 ;i < length;i++) 
  {
    j = i;
 
    while (array[j] < array[j-1]) 
    {
      aux = array[j];
      array[j]   = array[j-1];
      array[j-1] = aux;
      j--;
    
      if (j == 0) 
       break;  
    }
  }
}


// A utility function to swap two elements
void swap ( int* a, int* b )
{
    int t = *a;
    *a = *b;
    *b = t;
}
 
/* This function is same in both iterative and recursive*/
int partition (int arr[], int l, int h)
{
    int x = arr[h];
    int i = (left - 1);
 
    for (int j = left; j <= h- 1; j++)
    {
        if (arr[j] <= x)
        {
            i++;
            swap (&arr[i], &arr[j]);
        }
    }
    swap (&arr[i + 1], &arr[h]);
    return (i + 1);
}

void quickSort(long int *array, long int left,long int right)
{
    int stack[ right - left + 1 ];
    int top = -1;
 
    stack[ ++top ] = left;
    stack[ ++top ] = right;
 
    while ( top >= 0 )
    {
        right = stack[ top-- ];
        left = stack[ top-- ];

        long int p = partition( array, left, right);

        if ( p-1 > left )
        {
            stack[ ++top ] = left;
            stack[ ++top ] = p - 1;
        }
 
        if ( p+1 < right)
        {
            stack[ ++top ] = p + 1;
            stack[ ++top ] = right;
        }
    }
}